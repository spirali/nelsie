# This file is autogenerated by maturin v1.4.0
# To update, run
#
#    maturin generate-ci github
#
name: CI

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request:
  workflow_dispatch:

permissions:
  contents: read

jobs:

  checks:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Check Rust formatting
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check
      - name: Lint Rust
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --all -- -D warnings

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip wheel setuptools
          python -m pip install -r scripts/requirements-check.txt

      - name: Lint Python
        run: python -m ruff check

      - name: Check Python formatting
        run: python -m ruff format --check


  linux:
    runs-on: ubuntu-latest
    needs: [ checks ]
    strategy:
      matrix:
        target: [ x86_64, x86, aarch64, armv7, ppc64le ]
        # target: [ x86_64, x86, aarch64, armv7, s390x, ppc64le ]
        # target: [x86_64]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Test Rust
        uses: actions-rs/cargo@v1
        with:
          command: test
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist
          sccache: 'true'
          manylinux: auto
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-linux-${{ matrix.target }}
          path: dist

  windows:
    runs-on: windows-latest
    needs: [ checks ]
    strategy:
      matrix:
        # target: [x64, x86]
        target: [ x64 ]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          architecture: ${{ matrix.target }}
      - name: Test Rust
        uses: actions-rs/cargo@v1
        with:
          command: test
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist
          sccache: 'true'
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-windows-${{ matrix.target }}
          path: dist

  macos:
    runs-on: macos-latest
    needs: [ checks ]
    strategy:
      matrix:
        target: [ x86_64, aarch64 ]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Test Rust
        uses: actions-rs/cargo@v1
        with:
          command: test
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist
          sccache: 'true'
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-macos-${{ matrix.target }}
          path: dist

  sdist:
    runs-on: ubuntu-latest
    needs: [ checks ]
    steps:
      - uses: actions/checkout@v3
      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --out dist
      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: wheels-sdist
          path: dist

  test:
    strategy:
      matrix:
        # os: [ubuntu, macos, windows]
        os: [ ubuntu, windows ]
    runs-on: "${{ matrix.os }}-latest"
    needs: [ linux, macos, windows ]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v4
        with:
          pattern: wheels-*
          merge-multiple: true
          path: wheels
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install modules
        run: |
          python -m pip install --upgrade pip wheel setuptools
          python -m pip install -r scripts/requirements-test.txt
          python -m pip install nelsie --no-index --find-links wheels --force-reinstall
      - name: Run pytest
        id: python_test
        run: |
          python -m pytest tests --basetemp=testdir

      - name: Archive test artifacts
        if: always() && steps.python_test.outcome == 'failure'
        run: tar -cvf ${{ matrix.os }}-tests.tar testdir

      - name: Upload test artifacts
        uses: actions/upload-artifact@v4
        if: always() && steps.python_test.outcome == 'failure'
        with:
          name: pytest-artifacts-${{ matrix.os }}
          path: ${{ matrix.os }}-tests.tar


  build-docs:
    runs-on: ubuntu-latest
    needs: [ linux ]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v4
        with:
          pattern: wheels-*
          merge-multiple: true
          path: wheels
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install modules
        run: |
          python -m pip install --upgrade pip wheel setuptools
          python -m pip install -r scripts/requirements-doc.txt
          python -m pip install nelsie --no-index --find-links wheels --force-reinstall
      - name: Build docs
        run: |
          mkdocs build
          pdoc ./nelsie -o site/api_doc
      - name: Render bigexample
        run: |
          mkdir site/pdf
          cd examples/bigdemo
          python bigdemo.py
          cp bigdemo.pdf ../../site/pdf
      - name: Archive docs artifacts
        run: tar -cvf docs.tar site
      - name: Upload docs artifacts
        uses: actions/upload-artifact@v4
        with:
          name: docs
          path: docs.tar

  deploy-docs:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    needs: [ build-docs ]
    if: github.event_name != 'pull_request'
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v4
        with:
          name: docs
      - name: Unpack tar
        run: tar -xvf docs.tar
      - name: Deploy docs
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: site

  release:
    name: Release
    permissions:
      contents: write
    runs-on: ubuntu-latest
    if: "startsWith(github.ref, 'refs/tags/')"
    needs: [ test, sdist, deploy-docs ]
    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: wheels-*
          merge-multiple: true
          path: wheels
      - name: Publish to PyPI
        uses: PyO3/maturin-action@v1
        env:
          MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
        with:
          command: upload
          args: --non-interactive --skip-existing wheels/*
      - name: Create GitHub release
        uses: ncipollo/release-action@v1
        with:
          body: "See [CHANGELOG](https://github.com/spirali/nelsie/blob/main/CHANGELOG.md)."
          prerelease: false
          artifacts: "*.whl"
