{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":""},{"location":"#nelsie","title":"Nelsie","text":"<p>Nelsie allows you to create slides programmatically using Python. It is a library with a Python API and a renderer written in Rust. The output is a PDF file or a set of SVG/PNG files.</p> <p>There is no DSL or GUI; presentations created with Nelsie are fully programmed in Python. We believe that creating presentations in a programmable way makes the process of creating slides smoother and more reliable.</p> <p>Nelsie focuses on controlling what the audience sees, so you can continuously reveal fragments of the slide, or simply manage which parts are highlighted.</p>"},{"location":"#history","title":"History","text":"<p>Nelsie is a complete rewrite of the previous project Elsie. Nelsie solves the biggest problems of Elsie: Dependency on Inkscape as a rendering engine (This makes Elsie difficult to install on some systems; performance issues and problems when Inkscape changes its programming API). This is solved by a own rendering engine (based on resvg) included in the Nelsie package. Nelsie also offers many API improvements, namely the introduction of InSteps and the Flexbox layout engine.</p>"},{"location":"api/","title":"API docs","text":"<ul> <li>Generated API documentation</li> </ul>"},{"location":"examples/","title":"Examples","text":"<ul> <li>Minimal example [source code ]</li> <li>Demonstration of features [PDF, source code]</li> </ul>"},{"location":"getting_started/","title":"Getting started","text":"<ul> <li> <p>Install Nelsie package:     <pre><code>$ pip install nelsie\n</code></pre></p> </li> <li> <p>Create the file <code>slides.py</code> with the following content:</p> <pre><code>from nelsie import SlideDeck\n\n# Create a slide deck\ndeck = SlideDeck()\n\n# Insert a slide\n@deck.slide()\ndef hello_world(slide):\n    slide.text(\"Hello world!\")\n\n# Render into PDF\ndeck.render(\"slides.pdf\")\n</code></pre> </li> <li> <p>Run <code>python slides.py</code>. It creates file <code>slides.pdf</code>.</p> </li> </ul> <p>If you do not want to build your script manually, you can use Automatic slide rebuilding</p>"},{"location":"install/","title":"Installation","text":"<p>Nelsie requires Python 3.10+.</p>"},{"location":"install/#installation-via-pip-recommended","title":"Installation via <code>pip</code> (recommended)","text":"<pre><code>$ pip install nelsie\n</code></pre> <p>Nelsie supports Linux, Windows, and MacOS X on all major platforms.</p>"},{"location":"install/#installation-from-sources","title":"Installation from sources","text":"<ul> <li>Install Rust (https://rustup.rs/)</li> <li>Install Maturin (<code>pip install maturin</code>)</li> <li>Run in Nelsie source code directory:   <pre><code>$ python3 -m venv venv\n$ source venv/bin/activate\n$ maturin build --release\n</code></pre></li> </ul>"},{"location":"guide/basics/","title":"Basics","text":""},{"location":"guide/basics/#slide-deck","title":"Slide deck","text":"<p>A presentation (a set of slides) is represented in Nelsie as an instance of SlideDeck class.</p> <pre><code>from nelsie import SlideDeck\n\ndeck = SlideDeck()\n</code></pre> <p>In the constructor, you can define some values that will later be used as defaults for each slide; however, each slide can override these values individually. For example, you can define a default size for slides (if not specified, 1024x968 is used):</p> <pre><code>deck = SlideDeck(width=1920, height=1080)\n</code></pre> <p>Note on resolution</p> <p>Since the main output format is PDF, which is a vector format, the resolution does not define the \"quality\" of the output, but mostly just the size ratio.</p>"},{"location":"guide/basics/#creating-a-new-slide","title":"Creating a new slide","text":"<p>You can create new slides in two ways, either using the <code>new_slide</code> method or using a decorator <code>slide</code>.</p> <p>The example of using <code>new_slide</code>:</p> <pre><code>slide = deck.new_slide(bg_color=\"blue\")\nslide.text(\"First slide\")  # Put a text into slide\n</code></pre> <p>The example of using decorator <code>slide</code>:</p> <pre><code>@deck.slide(bg_color=\"blue\")\ndef first_slide(slide):\n    slide.text(\"First slide\")  # Put a text into slide\n</code></pre> <p>The decorator immediately calls the wrapped function that sets the content of the slide. The main function of the decorator is to break slides into individual functions for code clarity.</p>"},{"location":"guide/basics/#rendering-the-slide-deck","title":"Rendering the slide deck","text":"<p>Once all the slides have been created, you can render them into PDF with a <code>.render()</code> call on the slide deck.</p> <pre><code>deck.render(\"slides.pdf\")\n</code></pre> <p>You can also get SVG or PNG images from the slides, see the Output formats section for more information.</p>"},{"location":"guide/box/","title":"Box reference","text":"<p>Box is a basic layout in Nelsie. It represents a rectangular area on the slide.</p> <p>A new box is created by calling the <code>.box()</code> method on an existing box or a slide. This will return a new box that will be a child of the element on which you call the box method.</p>"},{"location":"guide/box/#parameters-of-box","title":"Parameters of <code>.box()</code>","text":""},{"location":"guide/box/#step-related-parameters","title":"Step-related parameters","text":"<ul> <li><code>show</code> - Defines the steps in which the box (its contents and children) is displayed. It only affects the drawing itself. The layout is always calculated, i.e. the space is reserved for the box, even in the steps where it is not painted.     Takes the following types:<ul> <li><code>bool</code> - the box is shown (<code>True</code>) or hidden (<code>False</code>) in all steps.</li> <li><code>int</code> - the box is shown only in the given step</li> <li><code>str</code> - a string may have the following format:<ul> <li><code>\"&lt;number&gt;\"</code> - the box is shown only in the given step</li> <li><code>\"&lt;number&gt;+\"</code> - the box is shown in the given step and all following steps</li> <li><code>\"&lt;number&gt;-&lt;number&gt;\"</code> - the box is shown in the steps in the given range.</li> <li>Comma separated list of the expression above. Then the box is shown in the union of steps defined by expressions. Example: <code>\"1, 5, 20-30, 35+\"</code>.</li> </ul> </li> </ul> </li> <li><code>active</code> - Takes the same parameters as <code>show</code> but in steps when the box is not active, it is also removed from the layout, i.e. no space is reserved for the box.</li> <li><code>replace_steps</code> - Takes <code>None</code> or a dictionary that maps</li> </ul>"},{"location":"guide/box/#ordering-parameters","title":"Ordering parameters","text":"<ul> <li><code>z_level</code> - An integer value used in painting order. Higher numbers are drawn later. If not set, the value is inherited from the parent box. The default value of the slide root box is <code>0</code>.</li> </ul>"},{"location":"guide/box/#background-parameters","title":"Background parameters","text":"<ul> <li><code>bg_color</code>- Sets a background color of the box. If <code>None</code>, no background is drawn. Default: <code>None</code>.</li> <li><code>border_radius</code> - A radius of the box's rounded corner. If <code>0</code> then no border is not rounded. Default: <code>0</code>.</li> </ul>"},{"location":"guide/box/#layout-parameters","title":"Layout parameters","text":"<ul> <li><code>x</code> -- X position of the box</li> <li><code>y</code> -- Y position of the box</li> <li><code>width</code> -- Width of the box<ul> <li><code>None</code> - (default) Automatic size. Minimum size around the content if <code>flex-grow</code> / <code>flex-shrink</code> is not set.</li> <li><code>int</code> or <code>float</code> or <code>str</code> containing digits -- A fixed size given in pixels (example: <code>20.5</code>, or <code>\"1.5\"</code>)</li> <li><code>str</code> in format <code>\"X%\"</code> where <code>X</code> is an integer -- A relative size to the parent box, in percent (example: <code>\"50%\"</code>)</li> <li><code>LayoutExpr</code> -- A fixed size defined by a layout expression.</li> </ul> </li> <li><code>height</code> - Height of the box<ul> <li>The paramter takes the same values as <code>width</code>.</li> </ul> </li> <li><code>row</code> - If <code>True</code> then the box arranges its children horizontally; otherwise vertically. Default: <code>False</code></li> <li><code>reverse</code> - If <code>True</code> then child boxes are ordered in the reverse order; i.e. in bottom-up (or right-left if <code>row</code> is <code>True</code>) Default: <code>False</code>.</li> <li><code>flex_wrap</code> -</li> <li><code>flex_grow</code> - The <code>flex_grow</code> parameter takes a <code>float</code> value. The default is <code>0</code>. This attribute specifies how much of the remaining space of its parent box should be allocated to this box.     The remaining space is the size of the box minus the size of all its children. If multiple sibling boxes have positive <code>flex_grow</code> values, it is distributed according to the ratio defined by their values.     This property is equivalent to the CSS property <code>flex-grow</code>.</li> <li><code>flex_shrink</code> - The <code>flex_grow</code> parameter takes a <code>float</code> value. The default is <code>0</code>. If the size of all flex items is larger than the flex container, items shrink to fit according to <code>flex_shrink</code>.     This property is equivalent to the CSS property <code>flex-grow</code>.</li> <li><code>align_items</code> -</li> <li><code>align_self</code> -</li> <li><code>justify_self</code> -</li> <li><code>align_content</code> -</li> <li><code>justify_content</code> -</li> <li><code>gap</code> -</li> <li><code>grid_template_rows</code> - Grid layout definition, see CSS grid for semantics<ul> <li><code>int</code> - Size of row in pixels</li> <li><code>str</code> </li> <li><code>\"X\"</code> if X is integer -- size in pixels</li> <li><code>\"X%\"</code> size in percent</li> <li><code>\"X fr\"</code> size in fractions   </li> </ul> </li> <li><code>grid_template_columns</code> - Same as <code>grid_template_rows</code></li> <li><code>grid_row</code> - Grid layout definition, see CSS grid for semantics.<ul> <li><code>\"auto\"</code> - Automatic position</li> <li><code>\"span X\"</code> - Span over more rows </li> <li><code>int</code> - Specific row, indexed from 1, negative allowed</li> <li><code>(int, int)</code> - Spans over more rows; first number is start is starting row index, the second number is end row index</li> <li><code>(int, \"span X\")</code> - Spans over more rows; first number is start is starting row index, X is how many rows it spans over</li> </ul> </li> <li><code>grid_column</code> - Same as <code>grid_row</code></li> </ul>"},{"location":"guide/box/#padding-parameters","title":"Padding parameters","text":"<ul> <li><code>p_left</code> - Left padding</li> <li><code>p_right</code> - Right padding</li> <li><code>p_top</code> - Top padding</li> <li><code>p_bottom</code> - Bottom padding</li> <li><code>p_x</code> - Shortcut for setting <code>p_left</code> and <code>p_right</code> to the same value</li> <li><code>p_y</code> - Shortcut for setting <code>p_top</code> and <code>p_bottom</code> to the same value</li> </ul>"},{"location":"guide/box/#margin-parameters","title":"Margin parameters","text":"<ul> <li><code>m_left</code> - Left margin</li> <li><code>m_right</code> - Right margin</li> <li><code>m_top</code> - Top margin</li> <li><code>m_bottom</code> - Bottom margin</li> <li><code>m_x</code> - Shortcut for setting <code>m_left</code> and <code>m_right</code> to the same value</li> <li><code>m_y</code> - Shortcut for setting <code>m_top</code> and <code>m_bottom</code> to the same value</li> </ul>"},{"location":"guide/box/#debugging-parameters","title":"Debugging parameters","text":"<ul> <li><code>name</code> - The name of the slide. It is displayed when the layout debugging view is enabled.</li> <li><code>debug_layout</code> - Enables/disables the layout debugging view for the box. If <code>True</code> then the view will be enabled with the   view will be enabled with the default colour for this box. If <code>str</code> is given then the view is enabled and the string is interpreted as the colour of the debugging view (e.g. <code>debug_view=\"green\"</code>). If <code>False</code> then the debugging view is disabled for this box, even if the whole slide has the debugging view enabled.</li> </ul>"},{"location":"guide/code/","title":"Syntax highlighting","text":"<p>Nelsie supports syntax highlighting for many common languages (The list of supported syntaxes).</p> <p>The <code>.code()</code> method creates a box with syntax highlighted text. It works similar to the <code>.text()</code> method. except that it takes a name for the syntax highlighter. You can use the name of the language or a filename extension for the language</p> <pre><code>@deck.slide()\ndef code_demo(slide):\n    slide.code(\"\"\"\nfn main() {\n    println!(\"Hello world!\")\n}\"\"\", \"Rust\")\n</code></pre>"},{"location":"guide/code/#default-syntax-language-for-syntax-highlighting","title":"Default syntax language for syntax highlighting","text":"<p>If you use mostly a single programming through the slides, you can set the default language for syntax highlighting.</p> <pre><code>deck = SlideDeck(default_code_language=\"Rust\")\n\n@deck.slide()\ndef code_demo(slide):\n    slide.code(\"\"\"\nfn main() {\n    println!(\"Hello world!\")\n}\"\"\")\n</code></pre>"},{"location":"guide/code/#styling-code","title":"Styling code","text":"<p>You can change the style by passing the parameter <code>style</code>:</p> <pre><code>@deck.slide()\ndef code_demo(slide):\n    slide.code(\"print('Hello world!')\", \"Python\", style=TextStyle(size=60))\n</code></pre>"},{"location":"guide/code/#named-style-code","title":"Named style <code>\"code\"</code>.","text":"<p>The <code>.code()</code> method uses the named style <code>\"code\"</code> as the default style. This allows you to change the code style globally or locally per slide.</p> <pre><code>deck.update_style(\"code\", TextStyle(size=60))\n</code></pre>"},{"location":"guide/code/#inline-text-styles","title":"Inline text styles","text":"<p>In contrast to <code>.text()</code>, the <code>.code()</code> method does not parse inline styles by default. But parsing the styles can be enabled by argument <code>parse_styles</code>.</p> <pre><code>@deck.slide()\ndef code_demo(slide):\n    slide.set_style(\"big\", TextStyle(size=80, color=\"orange\"))\n    slide.code(\"print('~big{Hello} world!')\", \"Python\",\n               style=TextStyle(size=60), parse_styles=True)\n</code></pre> <p>If characters \"~\", \"{\", \"}\" clashes with your programming language, you can change it by the <code>style_delimiters</code> parameter.</p> <pre><code>@deck.slide()\ndef code_demo(slide):\n    slide.set_style(\"big\", TextStyle(size=80, color=\"orange\"))\n    slide.code(\"print('$big&lt;Hello&gt; world!')\", \"Python\",\n               style=TextStyle(size=60), parse_styles=True, style_delimiters=\"$&lt;&gt;\")\n</code></pre>"},{"location":"guide/code/#syntax-highlighting-color-themes","title":"Syntax highlighting color themes","text":"<p>You can change color theme by passing argument <code>theme</code>:</p> <pre><code>@deck.slide()\ndef code_demo(slide):\n    slide.code(\"print('Hello world!')\", \"Python\",\n               theme=\"Solarized (light)\", style=TextStyle(size=60))\n</code></pre> <p>You can also change the color theme globally by setting <code>default_code_theme</code> in <code>SlideDeck</code>:</p> <pre><code>deck = SlideDeck(default_code_theme=\"Solarized (light)\")\n</code></pre> <p>The list of supported color themes; the default theme is \"InspiredGitHub\":</p> <ul> <li>\"base16-ocean.dark\"</li> <li>\"base16-eighties.dark\"</li> <li>\"base16-mocha.dark\"</li> <li>\"base16-ocean.light\"</li> <li>\"InspiredGitHub\"</li> <li>\"Solarized (dark)\"</li> <li>\"Solarized (light)\"</li> </ul> <p>Custom color themes can be added through <code>Resources</code>. This list is also programmatically available through <code>Resources</code>.</p>"},{"location":"guide/code/#the-list-of-supported-syntaxes","title":"The list of supported syntaxes","text":"<p>Custom syntax can be added through <code>Resources</code>. This list is also programmatically available through <code>Resources</code></p> <ul> <li>ASP (asa)</li> <li>ActionScript (as)</li> <li>AppleScript (applescript, script editor)</li> <li>Batch File (bat, cmd)</li> <li>BibTeX (bib)</li> <li>Bourne Again Shell (bash) (sh, bash, zsh, fish, .bash_aliases, .bash_completions, .bash_functions, .bash_login, .bash_logout, .bash_profile, .bash_variables, .bashrc, .profile, .textmate_init)</li> <li>C (c, h)</li> <li>C# (cs, csx)</li> <li>C++ (cpp, cc, cp, cxx, c++, C, h, hh, hpp, hxx, h++, inl, ipp)</li> <li>CSS (css, css.erb, css.liquid)</li> <li>Cargo Build Results ()</li> <li>Clojure (clj)</li> <li>D (d, di)</li> <li>Diff (diff, patch)</li> <li>Erlang (erl, hrl, Emakefile, emakefile)</li> <li>Go (go)</li> <li>Graphviz (DOT) (dot, DOT, gv)</li> <li>Groovy (groovy, gvy, gradle)</li> <li>HTML (html, htm, shtml, xhtml, inc, tmpl, tpl)</li> <li>HTML (ASP) (asp)</li> <li>HTML (Erlang) (yaws)</li> <li>HTML (Rails) (rails, rhtml, erb, html.erb)</li> <li>HTML (Tcl) (adp)</li> <li>Haskell (hs)</li> <li>JSON (json, sublime-settings, sublime-menu, sublime-keymap, sublime-mousemap, sublime-theme, sublime-build, sublime-project, sublime-completions, sublime-commands, sublime-macro, sublime-color-scheme)</li> <li>Java (java, bsh)</li> <li>Java Properties (properties)</li> <li>Java Server Page (JSP) (jsp)</li> <li>JavaDoc ()</li> <li>JavaScript (js, htc)</li> <li>JavaScript (Rails) (js.erb)</li> <li>LaTeX (tex, ltx)</li> <li>LaTeX Log ()</li> <li>Lisp (lisp, cl, clisp, l, mud, el, scm, ss, lsp, fasl)</li> <li>Literate Haskell (lhs)</li> <li>Lua (lua)</li> <li>MATLAB (matlab)</li> <li>Make Output ()</li> <li>Makefile (make, GNUmakefile, makefile, Makefile, OCamlMakefile, mak, mk)</li> <li>Markdown (md, mdown, markdown, markdn)</li> <li>MultiMarkdown ()</li> <li>NAnt Build File (build)</li> <li>OCaml (ml, mli)</li> <li>OCamllex (mll)</li> <li>OCamlyacc (mly)</li> <li>Objective-C (m, h)</li> <li>Objective-C++ (mm, M, h)</li> <li>PHP (php, php3, php4, php5, php7, phps, phpt, phtml)</li> <li>PHP Source ()</li> <li>Pascal (pas, p, dpr)</li> <li>Perl (pl, pm, pod, t, PL)</li> <li>Plain Text (txt)</li> <li>Python (py, py3, pyw, pyi, pyx, pyx.in, pxd, pxd.in, pxi, pxi.in, rpy, cpy, SConstruct, Sconstruct, sconstruct, SConscript, gyp, gypi, Snakefile, wscript)</li> <li>R (R, r, s, S, Rprofile)</li> <li>R Console ()</li> <li>Rd (R Documentation) (rd)</li> <li>Regular Expression (re)</li> <li>Regular Expressions (Javascript) ()</li> <li>Regular Expressions (Python) ()</li> <li>Ruby (rb, Appfile, Appraisals, Berksfile, Brewfile, capfile, cgi, Cheffile, config.ru, Deliverfile, Fastfile, fcgi, Gemfile, gemspec, Guardfile, irbrc, jbuilder, podspec, prawn, rabl, rake, Rakefile, Rantfile, rbx, rjs, ruby.rail, Scanfile, simplecov, Snapfile, thor, Thorfile, Vagrantfile)</li> <li>Ruby Haml (haml, sass)</li> <li>Ruby on Rails (rxml, builder)</li> <li>Rust (rs)</li> <li>SQL (sql, ddl, dml)</li> <li>SQL (Rails) (erbsql, sql.erb)</li> <li>Scala (scala, sbt)</li> <li>Shell-Unix-Generic ()</li> <li>Tcl (tcl)</li> <li>TeX (sty, cls)</li> <li>Textile (textile)</li> <li>XML (xml, xsd, xslt, tld, dtml, rss, opml, svg)</li> <li>YAML (yaml, yml, sublime-syntax)</li> <li>camlp4 ()</li> <li>commands-builtin-shell-bash ()</li> <li>reStructuredText (rst, rest)</li> </ul>"},{"location":"guide/code/#empty-language","title":"Empty language","text":"<p>Language for syntax highlighting can be se to <code>None</code>. In such case, no syntax highlighting is used while all other <code>.code()</code> properties are used.</p>"},{"location":"guide/colors/","title":"Colors","text":"<p>Colors can be defined in several places: background of boxes, color of text, and path drawing. All these places uses the color format:</p> <ul> <li>Color keyword: e.g. <code>\"green\"</code>, <code>\"blue\"</code>. See list of recognized SVG color names</li> <li>Hex color value: e.g. <code>\"#fff\"</code>, <code>\"#a0a0a0\"</code>.</li> <li>RGB values: e.g. <code>\"rgb(34, 12, 64, 0.6)\"</code>.</li> <li>HSL values: e.g. <code>\"hsl(30, 100%, 50%, 0.6)\"</code>.</li> </ul>"},{"location":"guide/counters/","title":"Page counters","text":"<p>Page counters serves to show information about the current page or the total number of pages on slides.</p> <p>The following variables can be used in any text on slide if parameter <code>parse_counters</code> of <code>.text()</code> (or <code>.code()</code>) is set to <code>True</code>. The <code>&lt;NAME&gt;</code> is a name of the actual counter.</p> <ul> <li><code>$(&lt;NAME&gt;_page)</code> -- The current page index (counted from 1) for the given counter.</li> <li><code>$(&lt;NAME&gt;_pages)</code> -- The total number of pages of the counter.</li> <li><code>$(&lt;NAME&gt;_slide)</code> -- The current slide index (counted from 1) for the given counter. Note that a slide may produce   more steps and therefore may have more pages. For all pages of the same slide, the slide index remains the same if   there is no inserted slided. In case of inserting a slide, switching back to the original slide also increases slide   index counter if the inserted slide was included in counter.</li> <li><code>$(&lt;NAME&gt;_slides)</code> -- The total number of slide for the given counter.</li> </ul> <p>The counter <code>global</code> always exists and it includes all slides.</p> <pre><code>deck.set_style(\"default\", TextStyle(size=80))\n\ndef show_counter(slide):\n    slide.text(\"Page: $(global_page)/$(global_pages)\",\n               parse_counters=True,\n               x=0, y=0, style=TextStyle(color=\"green\"))\n\n@deck.slide()\ndef counters_demo1(slide):\n    show_counter(slide)\n    slide.text(\"A1\")\n    slide.text(\"A2\", show=\"2+\")\n    slide.text(\"A3\", show=\"3+\")\n\n@deck.slide()\ndef counters_demo2(slide):\n    show_counter(slide)\n    slide.text(\"B1\")\n    slide.text(\"B2\", show=\"2+\")\n</code></pre> Prev 1/5         Next"},{"location":"guide/counters/#custom-counters","title":"Custom counters","text":"<p>If you want to count only some slides, you can create a custom counter and count only a subset of slides.</p> <p>In the following code, we create a custom counter <code>\"my\"</code>:</p> <pre><code>deck.set_style(\"default\", TextStyle(size=80))\n\ndef show_counter(slide):\n    # Here we show values of counter \"my\"\n    slide.text(\"Page: $(my_page)/$(my_pages)\",\n               parse_counters=True,\n               x=0, y=0, style=TextStyle(color=\"green\"))\n\n@deck.slide(counters=[\"my\"])  # Count this slide in counter \"my\"\ndef counters_demo1(slide):\n    show_counter(slide)\n    slide.text(\"A1\")\n    slide.text(\"A2\", show=\"2+\")\n    slide.text(\"A3\", show=\"3+\")\n\n@deck.slide()\ndef not_counted(slide):\n    slide.text(\"NOT COUNTED\")\n\n@deck.slide(counters=[\"my\"])  # Count this slide in counter \"my\"\ndef counters_demo2(slide):\n    show_counter(slide)\n    slide.text(\"B1\")\n    slide.text(\"B2\", show=\"2+\")\n</code></pre> Prev 1/6         Next"},{"location":"guide/debug_layout/","title":"Debugging layout","text":"<p>This page describes how you an debug a layout boxes by visualizing them.</p>"},{"location":"guide/debug_layout/#enabling-debug_layout-for-whole-slide","title":"Enabling <code>debug_layout</code> for whole slide","text":"<p>To visualize layout boxes you can set <code>debug_layout</code> to <code>True</code> in the slide configuration: </p> <pre><code>@deck.slide(debug_layout=True)\ndef example_slide(slide):\n    slide.box(width=600, height=200)\n    slide.box(width=600, height=200)\n    slide.box(width=600, height=200)\n</code></pre> <p>If the default color for displaying debug frames of boxes conflicts with the colors of your slide's content or background, you can define your own color for drawing.</p> <pre><code>@deck.slide(debug_layout=\"green\")\ndef example_slide(slide):\n    slide.box(width=600, height=200)\n    slide.box(width=600, height=200)\n    slide.box(width=600, height=200)\n</code></pre>"},{"location":"guide/debug_layout/#enabling-debug_layout-for-a-box","title":"Enabling <code>debug_layout</code> for a box","text":"<p>You can also change the color only for a specific box by setting the <code>debug_layout</code> parameter of the box. You can also disable the highlighting of a specific box frame by setting <code>debug_layout</code> to <code>False</code>.</p> <pre><code>@deck.slide(debug_layout=True)\ndef example_slide(slide):\n    slide.box(width=600, height=200)\n\n    # Set green frame for this box\n    slide.box(width=600, height=200, debug_layout=\"green\")\n\n    # Disable layout debugging for this box\n    slide.box(width=600, height=200, debug_layout=False)\n</code></pre> <p>Or you can just enable the debug frames only for a specific box:</p> <pre><code>@deck.slide()\ndef example_slide(slide):\n    slide.box(width=600, height=200)\n\n     # Show the debug frame for this box\n    slide.box(width=600, height=200, debug_layout=\"green\")\n\n    slide.box(width=600, height=200)\n</code></pre>"},{"location":"guide/debug_layout/#box-naming","title":"Box naming","text":"<p>You can name a box by setting the <code>name</code> parameter. The name has no effect on a layout, but it is displayed when debug frames are enabled. It may help you to find the box when there are too many boxes.</p> <p>Note: The slide previews in the documentation are too small to see the name. If you render the example in PDF, you will see it.</p> <pre><code>@deck.slide(debug_layout=True)\ndef box_with_names(slide):\n    slide.box(width=600, height=200, name=\"&gt;&gt;&gt; My-box &lt;&lt;&lt;\")\n</code></pre>"},{"location":"guide/images/","title":"Images","text":"<p>Images are put into the slides by calling <code>.image()</code> on a box. It creates a new box with an image. Nelsie supports the following formats: SVG, PNG, JPEG, and OpenRaster.</p> <pre><code>@deck.slide()\ndef image_demo(slide):\n    slide.image(\"./imgs/nelsie-logo.jpg\")\n</code></pre> <p>Note for Elsie users</p> <p>Calling <code>.image()</code> creates a new box; this is a different behavior than in Elsie, where calling <code>.image()</code> does not create a new box.</p>"},{"location":"guide/images/#image-box","title":"Image box","text":"<p>The <code>.image()</code> method also takes the same arguments as <code>.box()</code>, which are passed to the underlying box of the image. The main purpose is to set the image size. If only width or only height is set, the other coordinate is automatically calculated to maintain the aspect ratio of the image.</p> <pre><code>@deck.slide()\ndef image_demo(slide):\n    slide.image(\"./imgs/nelsie-logo.jpg\", width=\"50%\")\n</code></pre> <p>If both width and height are specified, image will try to fill the box while maintaining the aspect ratio; so part of the box may not be covered by the image.</p> <pre><code>@deck.slide()\ndef image_demo(slide):\n    slide.image(\"./imgs/nelsie-logo.jpg\", width=\"50%\", height=\"300\", bg_color=\"green\")\n</code></pre>"},{"location":"guide/images/#image-directory","title":"Image directory","text":"<p>A directory where images are searched for can be configured via <code>image_directory</code>.</p> <pre><code># Set image directory globally\ndeck = SlideDeck(image_directory=\"path/to/images\")\n\n# Set image directory per slide\n@deck.slide(image_directory=\"path/to/images\")\ndef my_slide(slide):\n    ...\n</code></pre>"},{"location":"guide/images/#image-and-steps","title":"Image and steps","text":"<p>Formats that supports layers (SVG and OpenRaster) may control revealing a part of image in steps by naming layers. JPEG, and PNG image does not have any impact on steps.</p> <p>If a layer has a name that ends with <code>**EXPR</code> where <code>EXPR</code> is an expression allowed in box's <code>show</code> argument, except for last/next/last+/next+ keywords. Keywords are not allowed in an image step definitions. Example: A layer with name \"My layer **2-4\" will be shown only steps 2, 3, 4.</p>"},{"location":"guide/images/#example","title":"Example","text":"<p>The following OpenRaster image contains three layers. The following screenshot shows layer names of the image when opened in Krita.</p> <p></p> <p>When the image is used in a slide, it generates three steps:</p> <pre><code>@deck.slide()\ndef image_demo(slide):\n    slide.image(\"./imgs/stepped_logo.ora\")\n</code></pre> Prev 1/3         Next <p>The same works also for SVG images. SVG layer names can be editor for example in Inkscape.</p>"},{"location":"guide/images/#disabling-steps","title":"Disabling steps","text":"<p>The definition of steps in an image can be disabled with <code>enable_steps=False</code>. All layers will be drawn normally.</p> <pre><code>@deck.slide()\ndef image_demo(slide):\n\n    # The slide will have just one step, as step definitions are ignored in the image.\n    slide.image(\"./imgs/stepped_logo.ora\", enable_steps=False)\n</code></pre>"},{"location":"guide/images/#shifting-steps","title":"Shifting steps","text":"<p>Step definitions in an image may be shifted via <code>shift_steps</code> argument. It basically adds a constant to all step definitions in an image.</p> <pre><code>@deck.slide()\ndef image_demo(slide):\n\n    # The first image will be shown at step 3\n    slide.image(\"./imgs/stepped_logo.ora\", shift_steps=2)\n</code></pre> Prev 1/3         Next"},{"location":"guide/insert/","title":"Slide insertion","text":"<p>Slide insertion serves for inserting a new slide in a sequence of steps of another slide.</p> <p>The slide insertion is implemented as methods <code>.new_slide_at()</code> and <code>.slide_at()</code> on a slide (not slide deck!). These methods are equivalent to <code>.new_slide</code> and <code>.slide</code> on a slide deck, but it takes one mandatory argument: a step of the parent slide where it should be inserted. Inserted slides are completely independent slides with its own step counters.</p>"},{"location":"guide/insert/#basic-example-of-a-slide-insertion","title":"Basic example of a slide insertion","text":"<pre><code>deck.set_style(\"default\", TextStyle(size=80))\n\n@deck.slide()\ndef parent_slide(slide):\n    slide.text(\"Step 1\")\n    slide.text(\"Step 2\", show=\"2+\")\n    slide.text(\"Step 3\", show=\"3+\")\n\n@parent_slide.slide_at(3)\ndef inserted_slide(slide):\n    slide.text(\"Insertion!\", TextStyle(color=\"red\"))\n</code></pre> Prev 1/4         Next"},{"location":"guide/insert/#insertion-to-the-same-place","title":"Insertion to the same place","text":"<p>When more slides are inserted to the same place, they are placed in the same order as they have been inserted:</p> <pre><code>deck.set_style(\"default\", TextStyle(size=80))\n\n@deck.slide()\ndef parent_slide(slide):\n    slide.text(\"Step 1\")\n    slide.text(\"Step 2\", show=\"2+\")\n    slide.text(\"Step 3\", show=\"3+\")\n\n@parent_slide.slide_at(3)\ndef inserted_slide(slide):\n    slide.text(\"Insertion 1\", TextStyle(color=\"red\"))\n\n@parent_slide.slide_at(3)\ndef inserted_slide(slide):\n    slide.text(\"Insertion 2\", TextStyle(color=\"blue\"))\n</code></pre> Prev 1/5         Next"},{"location":"guide/insert/#steps-and-insertions-into-inserted-slides","title":"Steps and insertions into inserted slides","text":"<p>Inserted slides may also have steps and inserted slides.</p> <pre><code>deck.set_style(\"default\", TextStyle(size=80))\n\n@deck.slide()\ndef parent_slide(slide):\n    slide.text(\"Step 1\")\n    slide.text(\"Step 2\", show=\"2+\")\n    slide.text(\"Step 3\", show=\"3+\")\n\n@parent_slide.slide_at(3)\ndef inserted_slide(slide):\n    slide.set_style(\"default\", TextStyle(color=\"red\"))\n    slide.text(\"Insertion: step 1\")\n    slide.text(\"Insertion: step 2\", show=\"2+\")\n    slide.text(\"Insertion: step 3\", show=\"3+\")\n\n@inserted_slide.slide_at(2)\ndef inserted_slide(slide):\n    slide.text(\"Sub insertion\", TextStyle(color=\"blue\"))\n</code></pre> Prev 1/7         Next"},{"location":"guide/layout/","title":"Layout","text":"<p>Nelsie uses a layout system that is based on the Flexbox and Grid system and adds some extra features.</p> <p>The central element of the Nelsie layout system is the Box. A box is a rectangular area on a slide that has a position and size. A box can contain other boxes or content (a text or an image). Each Nelsie slide contains a hierarchical tree of boxes. Boxes usually do not produce visual output directly, but they dictate how their children are arranged on a slide.</p>"},{"location":"guide/layout/#creating-a-box","title":"Creating a box","text":"<p>A new box is created by calling the <code>.box()</code> method on an existing box or a slide. This will return a new box that will be a child of the element on which you call the box method.</p> <p>This is a s minimal example where we create a box inside a slide:</p> <pre><code>@deck.slide()\ndef first_box(slide):\n    slide.box()\n</code></pre> <p>When we render this slide, we see an empty slide because the box itself produces no visual output.</p> <p>To make them visible, in the next example we set a background color for the boxes. We also set them to a fixed size, because by default box tries to be as small as possible and a box with no content takes up zero space.</p> <p>Example where we create three boxes:</p> <pre><code>@deck.slide()\ndef three_boxes(slide):\n    slide.box(width=600, height=200, bg_color=\"red\")\n    slide.box(width=600, height=200, bg_color=\"green\")\n    slide.box(width=600, height=200, bg_color=\"blue\")\n</code></pre> <p>The full reference on <code>.box()</code> parameters is in the section Box</p>"},{"location":"guide/layout/#debugging-layout","title":"Debugging layout","text":"<p>Another way how to visualize boxes is to set <code>debug_layout</code> to <code>True</code> in the slide configuration:</p> <pre><code>@deck.slide(debug_layout=True)\ndef debug_boxes(slide):\n    slide.box(width=600, height=200)\n    slide.box(width=600, height=200)\n    slide.box(width=600, height=200)\n</code></pre> <p>For more configuration for debugging layout, see Debugging layout.</p>"},{"location":"guide/layout/#box-main-axis","title":"Box main axis","text":"<p>Boxes can have either be vertical or horizontal main axis:</p> <ul> <li> <p>Vertical boxes place its child items vertically in a column. Their main axis is vertical and their cross axis is horizontal.</p> </li> <li> <p>Horizontal boxes place its child items horizontally in a row. Their main axis is horizontal and their cross axis is vertical.</p> </li> </ul> <p>By default, box is vertical. It can be changed by setting the parameter <code>row</code> to <code>True</code>:</p> <pre><code>@deck.slide()\ndef three_boxes(slide):\n\n    my_box = slide.box(row=True)\n    my_box.box(width=200, height=200, bg_color=\"red\")\n    my_box.box(width=200, height=200, bg_color=\"green\")\n    my_box.box(width=200, height=200, bg_color=\"blue\")\n</code></pre> <p>A box in a box</p> <p>Box can contain other boxes. A box within the box can be created by calling the <code>.box()</code> method on the parent box. In this example, the slide's root box contains <code>my_box</code> and <code>my_box</code> contains three other boxes.</p> <p>You can change the reverse order of child boxes by setting <code>reverse=True</code>. It will arrange elements from left to right (or bottom to top if <code>row=True</code>).</p> <pre><code>@deck.slide()\ndef three_boxes(slide):\n\n    my_box = slide.box(reverse=True)\n    my_box.box(width=200, height=200, bg_color=\"red\")\n    my_box.box(width=200, height=200, bg_color=\"green\")\n    my_box.box(width=200, height=200, bg_color=\"blue\")\n</code></pre>"},{"location":"guide/layout/#box-size","title":"Box size","text":"<p>Each box has a width and a height. By default, the box tries to take up as little space as possible. It will wraps its content tightly. If there is no content, the box has zero size. This behaviour can be configured by setting the <code>width</code>, <code>height</code>, <code>flex-grow</code> and <code>flex-shrink</code> parameters.</p>"},{"location":"guide/layout/#width-and-height","title":"Width and Height","text":"<p>Weight/height parameters:</p> <ul> <li><code>None</code> - (default) Automatic size. Minimum size around the content if <code>flex-grow</code> / <code>flex-shrink</code> is not set.</li> <li><code>int</code> or <code>float</code> or <code>str</code> containing digits -- A fixed size given in pixels (example values: <code>20.5</code>, or <code>\"1.5\"</code>)</li> <li><code>str</code> in format <code>\"XX%\"</code> where <code>XX</code> is an integer -- A relative size to the parent box, in percent (example: <code>\"50%\"</code>)</li> <li><code>LayoutExpr</code> - A fixed size defined by a layout expression.</li> </ul>"},{"location":"guide/layout/#flex-grow","title":"Flex grow","text":"<p>The <code>flex_grow</code> parameter takes a <code>float</code> value. The default is <code>0</code>. This attribute specifies how much of the remaining space of its parent box should be allocated to this box.</p> <p>The remaining space is the size of the box minus the size of all its children. If multiple sibling boxes have positive `flex_grow' values, it is distributed according to the ratio defined by their values.</p> <p>This property is equivalent to the CSS property `flex-grow'.</p> <pre><code>@deck.slide()\ndef flex_grow_demo(slide):\n    slide.box(width=200, height=100, bg_color=\"red\")\n    slide.box(width=200, flex_grow=1, bg_color=\"green\")\n    slide.box(width=200, height=200, bg_color=\"blue\")\n</code></pre>"},{"location":"guide/layout/#padding-margin","title":"Padding &amp; Margin","text":"<p>Padding (inner space) and margin (outer space) can be set via <code>p_left</code>, <code>p_right</code>, <code>p_top</code>, and <code>p_bottom</code> for setting padding and <code>m_left</code>, <code>m_right</code>, <code>m_top</code>, and <code>m_bottom</code> for setting a margin.</p> <pre><code>@deck.slide()\ndef flex_grow_demo(slide):\n    my_box = slide.box(p_top=100, p_left=50, bg_color=\"red\")\n    my_box.box(width=200, height=200, bg_color=\"green\")\n</code></pre> <p>There are also the following parameters for setting more padding/margin parameters at once:</p> <ul> <li><code>p_x</code> that sets <code>p_left</code> and <code>p_right</code></li> <li><code>p_y</code> that sets <code>p_top</code> and <code>p_bottom</code></li> <li><code>m_x</code> that sets <code>m_left</code> and <code>m_right</code></li> <li><code>m_y</code> that sets <code>m_top</code> and <code>m_bottom</code></li> </ul>"},{"location":"guide/layout/#arranging-box-children","title":"Arranging box children","text":"<p>Nelsie provides a flexbox layout system See Flexbox froggy for a nice tutorial.</p> <p>Most of the layouts can be done via flexbox; however, also supports grid layout, see Grid layout.</p> <p>Nelsie supports from flexbox: <code>justify_content</code>, <code>align_items</code>, <code>align_self</code>, <code>align_items</code>, <code>align_self</code>, <code>justify_self</code>, <code>align_content</code>, <code>justify_content</code> and <code>gap</code>.</p> <p>The default configuration is <code>\"center\"</code> for configurations <code>justify_content</code> and <code>align_items</code>, i.e. items are put in the center on both axes.</p>"},{"location":"guide/layout/#example-for-justify_content","title":"Example for <code>justify_content</code>","text":"<pre><code>@deck.slide()\ndef justify_content_start(slide):\n    b = slide.box(height=\"100%\", justify_content=\"start\")\n    b.box(width=200, height=150, bg_color=\"red\")\n    b.box(width=200, height=150, bg_color=\"green\")\n    b.box(width=200, height=150, bg_color=\"blue\")\n\n\n@deck.slide()\ndef justify_content_end(slide):\n    b = slide.box(height=\"100%\", justify_content=\"end\")\n    b.box(width=200, height=150, bg_color=\"red\")\n    b.box(width=200, height=150, bg_color=\"green\")\n    b.box(width=200, height=150, bg_color=\"blue\")\n\n\n@deck.slide()\ndef justify_content_end(slide):\n    b = slide.box(height=\"100%\", justify_content=\"space-evenly\")\n    b.box(width=200, height=150, bg_color=\"red\")\n    b.box(width=200, height=150, bg_color=\"green\")\n    b.box(width=200, height=150, bg_color=\"blue\")\n</code></pre> Prev 1/3         Next"},{"location":"guide/layout/#fixed-positioning-of-a-box","title":"Fixed positioning of a box","text":"<p>You can set parameters <code>x</code> and <code>y</code> to set a fix position of the box independantly on the layout engine.</p> <ul> <li><code>None</code> - (default) Coordianes are set by the layout engine.</li> <li><code>int</code> or <code>float</code> or <code>str</code> containing digits -- A fixed position given relative to the parent box in pixels (example values: <code>20.5</code>, or <code>\"1.5\"</code>)</li> <li><code>str</code> in format <code>\"XX%\"</code> where <code>XX</code> is an integer -- A fixed position relative to the parent box, in percent (example value: <code>\"50%\"</code> means that <code>x</code> (resp. <code>y</code>) is set to the 50% of width (resp. height) of the parent box)</li> <li><code>LayoutExpr</code> - A fixed position defined by a layout expression.</li> </ul>"},{"location":"guide/layout/#grid-layout","title":"Grid layout","text":"<p>Nelsie also supports grid layout system; see Grid garden for a nice tutorial.</p> <pre><code>@deck.slide()\ndef justify_content_start(slide):\n    b = slide.box(\n        width=\"100%\", height=\"100%\",\n        grid_template_columns=(\"1 fr\", \"1fr\"),\n        grid_template_rows=(\"1 fr\", \"1fr\"))\n    b.box(grid_column=2, grid_row=2, bg_color=\"orange\").text(\"Grid 2-2\")\n</code></pre> <p>Grid templates (<code>grid_template_rows</code> and <code>grid_template_columns</code>) may have values as follows:</p> <ul> <li><code>200</code> or <code>\"200\"</code> - size of row/column in pixels</li> <li><code>\"50%\"</code> - size of row/column in percents</li> <li><code>\"1 fr\"</code> - size of row/column in fractions</li> </ul> <p>Grid positions (<code>grid_row</code> and <code>grid_column</code>) may have values as follows:</p> <ul> <li><code>2</code> - box at row/column <code>2</code></li> <li><code>(2, 5)</code> - box that spans from row/column 2 to row/column 5</li> <li><code>(2, \"span 3\")</code> - box that spans from row/column 2 over 3 row/column.</li> </ul>"},{"location":"guide/layout/#a-rich-table-example","title":"A rich table example","text":"<pre><code>@deck.slide()\ndef grid_demo(slide):\n    data = [\n        (\"Name\", \"Time\", \"Type\"),\n        (\"Jane\", 3.5, \"A1\"),\n        (\"John\", 4.1, \"B7\"),\n        (\"Johanna\", 12.0, \"C1\"),\n        (\"Elise\", 12.5, \"D4\"),\n        (\"Max\", 320.2, \"E1\")\n    ]\n\n    # Draw the table\n    table = slide.box(\n        width=\"70%\",\n        grid_template_columns=[\"2fr\", \"1fr\", 130],\n        grid_template_rows=[50] + [40] * (len(data) - 1),\n        bg_color=\"#ddd\",\n    )\n    header_style = TextStyle(weight=800)\n    table.box(grid_column=(1, 4), grid_row=1, bg_color=\"#fbc\")\n    for i in range(2, len(data) + 1, 2):\n        table.box(grid_column=(1, 4), grid_row=i, bg_color=\"#eee\")\n    column1 = table.box(grid_column=2, grid_row=(1, len(data) + 1))\n    stroke = Stroke(color=\"#888\", width=2)\n    column1.draw(Path(stroke=stroke).move_to(0, 0).line_to(0, \"100%\"))\n    column1.draw(Path(stroke=stroke).move_to(\"100%\", 0).line_to(\"100%\", \"100%\"))\n\n    # Fill the table with data\n    for i, row in enumerate(data, 1):\n        s = header_style if i == 1 else None\n        table.box(grid_column=1, grid_row=i).text(row[0], s)\n        table.box(grid_column=2, grid_row=i, row=True, justify_content=\"end\", m_right=30).text(str(row[1]), s)\n        table.box(grid_column=3, grid_row=i, row=True, justify_content=\"start\", m_left=30).text(row[2], s)\n</code></pre>"},{"location":"guide/layout/#method-overlay","title":"Method <code>.overlay()</code>","text":"<p>There is a <code>.overlay()</code> method that is a shortcut for <code>.box(x=0, y=0, width=\"100%\", height=\"100%\")</code>; it creates a box that spans over the whole parent box.</p>"},{"location":"guide/layoutexpr/","title":"Layout expressions","text":"<p>Layout expressions are used to define positions and sizes in relation to other elements of slides at a time when the layout has not yet been calculated. Layout expressions is a placeholder that gets its value when the element on which the expression depends is calculated.</p> <p>Layout expressions can be used in definition of position and size of boxes and points on paths.</p> <p>There are three of type of layout expressions:</p> <ul> <li>Box layout expressions: They refer to a box layout properties. They are created by calling <code>.x()</code>, <code>.y()</code>, <code>.width()</code>, <code>.height()</code> on a box coordines and width.</li> <li>Line expressions: They refer to a line of a text. They are created by calling <code>.line_x(line_idx)</code>, <code>.line_y(line_idx)</code>, <code>.line_width(line_idx)</code>, <code>.line_height(line_idx)</code> on a box with a text.</li> <li>Text anchor expressions: They refer to a part of a text. They are created by calling <code>.text_anchor_x(anchor_id)</code>, <code>.text_anchor_y(anchor_id)</code>, <code>.text_anchor_width(anchor_id)</code>, <code>.text_anchor_height(anchor_id)</code> on a box with a text.</li> </ul>"},{"location":"guide/layoutexpr/#box-layout-expressions","title":"Box layout expressions","text":"<pre><code>@deck.slide()\ndef layout_expression_demo(slide):\n    box1 = slide.box(width=300, height=100, bg_color=\"red\")\n    box2 = slide.box(width=150, height=200, bg_color=\"green\")\n\n    # Create a new box relative to the box1 x-position and box2 y-position\n    slide.box(x=box1.x(), y=box2.y(), width=50, height=50, bg_color=\"blue\")\n</code></pre>"},{"location":"guide/layoutexpr/#line-layout-expressions","title":"Line layout expressions","text":"<p>Line layout expressions require one parameter that is the index of the line; the index is counted from zero.</p> <pre><code>@deck.slide()\ndef layout_expression_demo(slide):\n    box = slide.text(\"\"\"\nLorem ipsum dolor sit amet,\nconsectetuer adipiscing elit.\nNulla turpis magna, cursus sit amet, suscipit a,\ninterdum id, felis.\n    \"\"\")\n\n    slide.box(x=box.line_x(1),\n              y=box.line_y(1),\n              width=box.line_width(1),\n              height=box.line_height(1),\n              bg_color=\"lightgreen\",\n              z_level=-1)  # Set z-level to draw the box below the text\n</code></pre>"},{"location":"guide/layoutexpr/#text-anchor-layout-expressions","title":"Text anchor layout expressions","text":"<p>Text anchor is a part of a text. Each text anchor has an unsigned integer ID that has to be unique within the text. Text anchor is defined in the same syntax as text styles, except that the name of style is composed of digits. These digits then define the ID of the anchor.</p> <pre><code>@deck.slide()\ndef layout_expression_demo(slide):\n    box = slide.text(\"\"\"\nLorem ~42{ipsum} dolor sit amet,\nconsectetuer adipiscing elit.\n~105{Nulla turpis magna}, cursus sit amet, suscipit a,\ninterdum id, felis.\n    \"\"\")\n\n    slide.box(x=box.text_anchor_x(42),\n              y=box.text_anchor_y(42),\n              width=box.text_anchor_width(42),\n              height=box.text_anchor_height(42),\n              bg_color=\"lightgreen\",\n              z_level=-1)  # Set z-level to draw the box below the text\n\n    slide.box(x=box.text_anchor_x(105),\n              y=box.text_anchor_y(105),\n              width=box.text_anchor_width(105),\n              height=box.text_anchor_height(105),\n              bg_color=\"#ff99ff\",\n              z_level=-1)  # Set z-level to draw the box below the text\n</code></pre> <p>Text anchor and <code>.code()</code></p> <p>Parsing text anchors is done through the same mechanism as text styles. You need to enable style parsing <code>parse_styles=True</code> in .code() for using text anchor in code.</p>"},{"location":"guide/layoutexpr/#box-creation-shortcuts","title":"Box creation shortcuts","text":"<p><code>box.line_box(line_idx)</code> is shortcut for</p> <pre><code>box.box(x=box.line_x(line_idx),\n        y=box.line_y(line_idy),\n        width=box.line_width(line_idx),\n        height=box.line_height(line_idx))`.\n</code></pre> <p><code>box.text_anchor_box(anchor_id)</code> is shortcut for</p> <pre><code>box.box(x=box.text_anchor_x(anchor_id),\n        y=box.text_anchor_y(text_anchor_idy),\n        width=box.text_anchor_width(anchor_id),\n        height=text_anchor_height(anchor_id))`.\n</code></pre>"},{"location":"guide/layoutexpr/#modifying-value-of-a-layout-expression","title":"Modifying value of a layout expression","text":"<p>When the layout is created, you cannot get the value of expression as the whole layout is not constructed yet; however you can make a simple mathematical operations on expressions. Nelsie remebers them and applies them when the final value is computed.</p> <pre><code>@deck.slide()\ndef layout_expression_demo(slide):\n    box1 = slide.box(width=300, height=100, bg_color=\"red\")\n    box2 = slide.box(width=150, height=200, bg_color=\"green\")\n\n    # Create a new box relative to the box1 x-position - 50 and box2 y-position + 100\n    slide.box(x=box1.x() - 75, y=box2.y() + 100,\n              width=50, height=50, bg_color=\"blue\")\n</code></pre>"},{"location":"guide/layoutexpr/#size-scaling-parameter","title":"Size scaling parameter","text":"<p>All of layout-expression creating methods take an optional <code>float</code> parameter, which sets the position or size with respect to the fraction of the box size in the given dimension, e.g. <code>.x(0.5)</code> means the center of the box on the <code>X</code> axis. More precisely, it is defined as follows:</p> <ul> <li><code>.x(v)</code> = <code>.x()</code> + v * <code>.width()</code></li> <li><code>.y(v)</code> = <code>.y()</code> + v * <code>.height()</code></li> <li><code>.width(v)</code> = v * <code>.width()</code></li> <li><code>.height(v)</code> = h * <code>.height()</code></li> </ul> <p>Example:</p> <pre><code>@deck.slide()\ndef layout_expression_demo(slide):\n    box1 = slide.box(width=300, height=400, bg_color=\"red\")\n\n    slide.box(x=box1.x(0.5), y=box1.y(0.25),\n              width=box1.width(0.5), height=box1.height(0.5),\n              bg_color=\"green\")\n</code></pre> <p>The same principle holds for other layout expressions:</p> <ul> <li><code>.line_x(line_idx, v)</code> = <code>.line_x(line_idx)</code> + v * <code>.line_width(line_idx)</code></li> <li><code>.line_y(line_idx, v)</code> = <code>.line_y(line_idx)</code> + v * <code>.line_height(line_idx)</code></li> <li><code>.line_width(line_idx, v)</code> = v * <code>.line_width(line_idx)</code></li> <li> <p><code>.line_height(line_idx, v)</code> = h * <code>.line_height(line_idx)</code></p> </li> <li> <p><code>.text_anchor_x(anchor_id, v)</code> = <code>.text_anchor_x(anchor_id)</code> + v * <code>.text_anchor_width(anchor_id)</code></p> </li> <li><code>.text_anchor_y(anchor_id, v)</code> = <code>.text_anchor_y(anchor_id)</code> + v * <code>.text_anchor_height(anchor_id)</code></li> <li><code>.text_anchor_width(anchor_id, v)</code> = v * <code>.text_anchor_width(anchor_id)</code></li> <li><code>.text_anchor_height(anchor_id, v)</code> = h * <code>.text_anchor_height(anchor_id)</code></li> </ul>"},{"location":"guide/links/","title":"Links","text":"<p>You can create a clicable link in slides as follows:</p> <pre><code>@deck.slide()\ndef three_boxes(slide):\n    slide.text(\"Nelsie\",\n               TextStyle(size=64, underline=True),\n               url=\"https://github.com/spirali/nelsie\")\n</code></pre> <p>If the slides are rendered into PDF it will create a clicable link.</p> <p>Note</p> <p>Creating clicable links now works only if you create PDF file as the output. For SVG and PNG output it is not supported. Therefore it is also not working here in the documentation.</p>"},{"location":"guide/links/#url-parameter-of-a-box","title":"<code>url</code> parameter of a box","text":"<p>Parameter <code>url</code> can be passed to any box, not only text as shows the example above. Therefore, you can create a clicable link from images or a set of other boxes, or just part of the text if you use a text anchor box.</p> <p>Example:</p> <pre><code>slide.image(\"logo.png\", url=\"...\")\n\nbox = slide.box(url=\"...\")\nbox.image(...)\nbox.text(...)\n</code></pre>"},{"location":"guide/list/","title":"List","text":"<p>Lists are not build-in in Nelsie. You can create lists manually, or you can create a helper class <code>ListBox</code> for creating lists.</p> <p><code>ListBox</code> takes a box as a first parameter and creates list in this box. <code>ListBox</code> behaves as a normal vertical box but creates a bullet for each child.</p>"},{"location":"guide/list/#unordered-list","title":"Unordered list","text":"<pre><code>from nelsie.helpers.list import ListBox\n\n@deck.slide()\ndef list_demo(slide):\n    slide.set_style(\"default\", TextStyle(size=80))\n    lst = ListBox(slide)\n    lst.text(\"First item\")\n    lst.text(\"Second item\")\n    lst.text(\"Third item\")\n</code></pre>"},{"location":"guide/list/#ordered-list","title":"Ordered list","text":"<p>You can change type of by setting a second argument <code>list_type</code> to following values:</p> <ul> <li><code>\"unordered\"</code> (default) - Unordered list</li> <li><code>\"1\"</code> - Ordered list, 1., 2., 3. ...</li> <li><code>\"a\"</code> - Ordered list, a., b., c. ...</li> <li><code>\"A\"</code> - Ordered list, A., B., C. ...</li> </ul> <pre><code>from nelsie.helpers.list import ListBox\n\n@deck.slide()\ndef list_demo(slide):\n    slide.set_style(\"default\", TextStyle(size=80))\n    lst = ListBox(slide, \"1\")\n    lst.text(\"First item\")\n    lst.text(\"Second item\")\n    lst.text(\"Third item\")\n</code></pre> <pre><code>from nelsie.helpers.list import ListBox\n\n@deck.slide()\ndef list_demo(slide):\n    slide.set_style(\"default\", TextStyle(size=80))\n    lst = ListBox(slide, \"a\")\n    lst.text(\"First item\")\n    lst.text(\"Second item\")\n    lst.text(\"Third item\")\n</code></pre>"},{"location":"guide/list/#sublists","title":"Sublists","text":"<p>A sublist can be created by calling <code>.list()</code> method on an existing <code>ListBox</code>. It returns an instance of <code>ListBox</code>.</p> <pre><code>from nelsie.helpers.list import ListBox\n\n@deck.slide()\ndef list_demo(slide):\n    slide.set_style(\"default\", TextStyle(size=80))\n\n    lst = ListBox(slide)\n    lst.text(\"First item\")\n    lst.text(\"Second item\")\n\n    lst2 = lst.list()\n    lst2.text(\"Hello\")\n    lst2.text(\"World!\")\n</code></pre>"},{"location":"guide/output/","title":"Output formats","text":"<p>This section shows you how to get slides in PDF, SVG or PNG and how to render slides into files or how to get them as Python objects.</p>"},{"location":"guide/output/#rendering-into-pdf","title":"Rendering into PDF","text":"<p>By default, the <code>.render()</code> method on a slide deck takes a filename and creates a PDF file.</p> <pre><code>from nelsie import SlideDeck\n\ndeck = SlideDeck()\n\n# Add slides here\n\ndeck.render(\"slides.pdf\")\n</code></pre>"},{"location":"guide/output/#rendering-into-svg-or-png","title":"Rendering into SVG or PNG","text":"<p>By setting the second parameter to \"svg\" or \"png\", you can change the output format to SVG or PNG.</p> <pre><code>from nelsie import SlideDeck\n\ndeck = SlideDeck()\n\n# Add slides here\n\ndeck.render(\"output/path1\", \"svg\")  # Render slides to SVG\n\ndeck.render(\"output/path2\", \"png\")  # Render slides to PNG\n</code></pre> <p>Unlike PDF, the first parameter is not a path to a file, but to a directory where Nelsie creates SVG (or PNG) images, one image per slide page. Nelsie will create the target directory if it does not exist. Images are named in the format \"X-Y-Z.svg\" (or \"X-Y-Z.png\"), where X is the page index (zero padded), Y is the slide index and Z is a step.</p>"},{"location":"guide/output/#in-memory-rendering","title":"In-memory rendering","text":"<p>If the first parameter of the <code>.render()</code> method is <code>None</code> then Nelsie does not create files but returns the images as Python objects. It returns a list of triplets (<code>slide_id</code>, <code>step</code>, <code>data</code>) where <code>data</code> are <code>bytes</code> instance with the image.</p> <pre><code>pages = deck.render(None, \"png\")\n\nprint(pages)  # Print returned triplets with pages\n</code></pre>"},{"location":"guide/paths/","title":"Paths","text":"<p>A path is a sequence of straight line segments and/or Bezier curves. A path may be filled and/or stroked. A path may have attached arrow to beginning and/or end.</p> <p>Paths are drawn in Nelsie by constructing a <code>Path</code> instance and calling <code>.draw()</code> method on a box. Path can be stroked</p> <pre><code>from nelsie import Path, Stroke\n\n@deck.slide()\ndef path_demo(slide):\n    stroke = Stroke(color=\"orange\", width=40)\n    path = Path(fill_color=\"blue\", stroke=stroke) \\\n            .move_to(204, 300) \\\n            .line_to(819, 300) \\\n            .line_to(512, 600)\n    slide.draw(path)\n</code></pre>"},{"location":"guide/paths/#path-methods","title":"<code>Path</code> methods","text":"<p><code>Path</code> constructor create an empty instance of a path. You can create line segments or Bezeier curves by calling the following methods:</p> <ul> <li><code>.move_to(x, y)</code> -- move the cursor to a given position without visible effect</li> <li><code>.move_by(x, y)</code> -- move the cursor by a given <code>(x, y)</code> offset, relative to the last position set by any <code>*_to</code> method</li> <li><code>.line_to(x, y)</code> -- create a line segment</li> <li><code>.line_by(x, y)</code> -- create a line segment that ends at the given <code>(x, y)</code> offset, relative to the last position set by any <code>*_to</code> method </li> <li><code>.quad_to(x1, y1, x, y)</code> -- create a quadratic bezier curve</li> <li><code>.cubic_to(x1, y1, x2, y2, x, y)</code> -- create a cubic bezier curve</li> <li><code>.close()</code> -- create a line segment to the initial point of the path</li> </ul> <pre><code>@deck.slide()\ndef path_demo(slide):\n    path = Path(fill_color=\"red\") \\\n             .move_to(200, 600) \\\n             .quad_to(500, 200, 800, 600) \\\n             .close()\n    slide.draw(path)\n</code></pre>"},{"location":"guide/paths/#path-coordinates","title":"Path coordinates","text":"<p>Path coordinates can be given as:</p> <ul> <li><code>float</code> or a string with digits, (e.g. <code>100</code>, <code>\"100\"</code>) - a position in pixels relative to a box where a path is drawn</li> <li>string in format \"XX%\" (e.g. <code>\"50%\"</code>) - a position relative to the box where the path is drawn with respect to its size.</li> <li><code>LayoutExpr</code> - a position defined as a layout expression (see Layout expressions)</li> </ul> <pre><code>@deck.slide()\ndef path_demo(slide):\n    path = Path(fill_color=\"red\") \\\n             .move_to(\"50%\", \"50%\") \\\n             .line_to(\"100%\", \"100%\") \\\n             .line_to(\"50%\", \"100%\")\n    slide.draw(path)\n</code></pre> <pre><code>@deck.slide()\ndef path_demo(slide):\n    box = slide.text(\"Hello world\", TextStyle(size=80), bg_color=\"orange\")\n    path = Path(fill_color=\"red\") \\\n             .move_to(box.x(), box.y(1.0)) \\\n             .line_to(\"100%\", \"100%\") \\\n             .line_to(\"50%\", \"100%\")\n    slide.draw(path)\n</code></pre>"},{"location":"guide/paths/#pathoval-method","title":"<code>Path.oval</code> method","text":"<p>You can create a Path representing an oval (or a circle) by calling <code>Path.oval(x1, y1, x2, y2)</code></p> <pre><code>from nelsie import Path\n\n@deck.slide()\ndef path_demo(slide):\n    path = Path.oval(200, 200, 400, 400, fill_color=\"green\")\n    slide.draw(path)\n</code></pre>"},{"location":"guide/paths/#drawing-more-paths","title":"Drawing more paths","text":"<p>A path is drawn by calling <code>.draw()</code> method on a box. You can draw more paths at once by providing a list of paths.</p> <pre><code>box.draw([\n    Path(...), \n    Path(...),\n    Path(...)\n])\n</code></pre>"},{"location":"guide/paths/#stroke-class","title":"<code>Stroke</code> class","text":"<p><code>Stroke</code> class defines how a path is stroked; you can configure a color, width, and line dash.</p> <pre><code>from nelsie import Stroke\n\n@deck.slide()\ndef stroke_demo(slide):\n    box = slide.box(width=700, height=140, m_bottom=60)\n    box.draw(\n        [\n            Path(stroke=Stroke(color=\"red\", width=10)).move_to(0, 0).line_to(700, 0),\n            Path(stroke=Stroke(color=\"green\", width=20, dash_array=[10, 20], dash_offset=15))\n            .move_to(0, \"50%\")\n            .line_to(700, \"50%\"),\n            Path(stroke=Stroke(color=\"blue\", width=30, dash_array=[30, 10, 5, 10])).move_to(0, \"100%\").line_to(700, \"100%\"),\n        ]\n    )\n</code></pre>"},{"location":"guide/paths/#arrows","title":"Arrows","text":"<p>You can attach an arrow to the beginning and/or end of a path. An arrow is created as an instance of <code>Arrow</code> and can be passed to the constructor of a  can be passed to the constructor of <code>Path</code> in the parameters <code>arrow_start</code> and <code>arrow_end</code>. A color, size, angle, line width and position of the inner point can be configured.</p> <pre><code>from nelsie import Arrow\n\n@deck.slide()\ndef arrow_demo(slide):\n    box = slide.box(width=700, height=220)\n    arrow1 = Arrow(size=80)\n    stroke = Stroke(color=\"black\", width=10)\n    box.draw(\n        Path(stroke=stroke, arrow_start=arrow1, arrow_end=arrow1)\n            .move_to(0, 0)\n            .line_to(700, 0),\n    )\n</code></pre>"},{"location":"guide/paths/#color-of-arrows","title":"Color of arrows","text":"<p>If parameter <code>color</code> is not defined, then arrow will have the same color as the path.</p> <pre><code>@deck.slide()\ndef arrow_demo(slide):\n    box = slide.box(width=700, height=220)\n    stroke = Stroke(color=\"green\", width=10)\n    box.draw(\n        [\n            Path(stroke=stroke, arrow_end=Arrow(size=80))\n                .move_to(0, 0)\n                .line_to(700, 0),\n            Path(stroke=stroke, arrow_end=Arrow(size=80, color=\"red\"))\n                .move_to(0, 120)\n                .line_to(700, 120),\n        ]\n    )\n</code></pre>"},{"location":"guide/paths/#size-of-arrows","title":"Size of arrows","text":"<pre><code>@deck.slide()\ndef arrow_demo(slide):\n    box = slide.box(width=700, height=220)\n    stroke = Stroke(color=\"black\", width=10)\n    box.draw(\n        [\n            Path(stroke=stroke, arrow_end=Arrow(size=30))\n                .move_to(0, 0)\n                .line_to(700, 0),\n            Path(stroke=stroke, arrow_end=Arrow(size=80))\n                .move_to(0, 150)\n                .line_to(700, 150),\n            Path(stroke=stroke, arrow_end=Arrow(size=120))\n                .move_to(0, 300)\n                .line_to(700, 300),\n        ]\n    )\n</code></pre>"},{"location":"guide/paths/#angle-of-arrows","title":"Angle of arrows","text":"<pre><code>from nelsie import Arrow\n\n@deck.slide()\ndef arrow_demo(slide):\n    box = slide.box(width=700, height=220)\n    stroke = Stroke(color=\"black\", width=10)\n    box.draw(\n        [\n            Path(stroke=stroke, arrow_end=Arrow(size=80, angle=60))\n                .move_to(0, 0)\n                .line_to(700, 0),\n            Path(stroke=stroke, arrow_end=Arrow(size=80, angle=45))\n                .move_to(0, 150)\n                .line_to(700, 150),\n            Path(stroke=stroke, arrow_end=Arrow(size=80, angle=20))\n                .move_to(0, 300)\n                .line_to(700, 300),\n        ]\n    )\n</code></pre>"},{"location":"guide/paths/#stroked-arrows","title":"Stroked arrows","text":"<p>If <code>stroked_width</code> is not <code>None</code> then the arrow is not filled but stroked.</p> <pre><code>@deck.slide()\ndef arrow_demo(slide):\n    box = slide.box(width=700, height=220)\n    stroke = Stroke(color=\"black\", width=10)\n    box.draw(\n        [\n            Path(stroke=stroke, arrow_end=Arrow(size=80))\n                .move_to(0, 0)\n                .line_to(700, 0),\n            Path(stroke=stroke, arrow_end=Arrow(size=80, stroke_width=10))\n                .move_to(0, 150)\n                .line_to(700, 150),\n            Path(stroke=stroke, arrow_end=Arrow(size=80, stroke_width=30))\n                .move_to(0, 300)\n                .line_to(700, 300),\n        ]\n    )\n</code></pre>"},{"location":"guide/paths/#inner-point","title":"Inner point","text":"<pre><code>@deck.slide()\ndef arrow_demo(slide):\n    box = slide.box(width=700, height=220)\n    stroke = Stroke(color=\"black\", width=10)\n    box.draw(\n        [\n            Path(stroke=stroke, arrow_end=Arrow(size=80, inner_point=0.5))\n                .move_to(0, 0)\n                .line_to(700, 0),\n            Path(stroke=stroke, arrow_end=Arrow(size=80, inner_point=1.0))\n                .move_to(0, 150)\n                .line_to(700, 150),\n            Path(stroke=stroke, arrow_end=Arrow(size=80, inner_point=2.5))\n                .move_to(0, 300)\n                .line_to(700, 300),\n        ]\n    )\n</code></pre>"},{"location":"guide/paths/#insteps-and-paths","title":"<code>InSteps</code> and paths","text":"<p>Parameters of <code>Path</code> and <code>Arrow</code> do not take <code>InSteps</code> values; however <code>.draw()</code> method of the box accepts <code>InSteps</code> values:</p> <pre><code>@deck.slide()\ndef draw_insteps_demo(slide):\n    box = slide.box(width=700, height=220)\n    stroke = Stroke(color=\"black\", width=10)\n\n    path1 = Path(stroke=stroke).move_to(0, 0).line_to(700, 0)\n    path2 = Path(stroke=stroke).move_to(0, 100).line_to(700, 100)\n    path3 = Path(stroke=stroke).move_to(0, 200).line_to(700, 200)\n\n    box.draw(InSteps({1 : path1, 2: [path2, path3]}))\n</code></pre> Prev 1/2         Next"},{"location":"guide/rendering/","title":"Rendering","text":""},{"location":"guide/rendering/#z-level","title":"Z-level","text":"<p>By default, boxes are rendered in depth-first order. You can modify this by setting <code>z_level</code> to a box. This value is used in painting order. Higher numbers are drawn later. If not set, the value is inherited from the parent box. The default value of the slide root box is <code>0</code>. Z-level can be a negative integer.</p> <pre><code>@deck.slide()\ndef z_level_demo(slide):\n    slide.box(x=\"10%\", y=\"10%\", width=\"50%\", height=\"50%\", bg_color=\"red\")\n    slide.box(x=\"20%\", y=\"20%\", z_level=1,\n              width=\"50%\", height=\"50%\", bg_color=\"green\")\n    slide.box(x=\"30%\", y=\"30%\", width=\"50%\", height=\"50%\", bg_color=\"blue\")\n</code></pre>"},{"location":"guide/resources/","title":"Resources","text":"<p>An instance of the Resources class holds information about fonts, code syntaxes and themes, and loaded images. By default, an instance of SlideDeck creates its own instance of Resources, but you can create your own instance and pass it to the SlideDeck constructor.</p> <p>There are two main scenarios where it is useful to create your own instance of `Resources'.</p> <ul> <li>You want to register your own fonts, code syntaxes, or code themes</li> <li>You create more instances of <code>SlideDeck</code> and you want to skip some initialization or to skip   loading the same images repeatedly.</li> </ul> <p><code>Resources</code> instance can also provide a list of available syntaxes and syntax highlighting themes.</p>"},{"location":"guide/resources/#registering-own-fonts","title":"Registering own fonts","text":"<pre><code>from nelsie import Resources, SlideDeck\n\nresources = Resources()\nresources.load_fonts_dir(\"path/to/fonts\")\n\ndeck = SlideDeck(resources=resources)\n</code></pre>"},{"location":"guide/resources/#loading-custom-code-syntaxes","title":"Loading custom code syntaxes","text":"<p>Nelsie supports loading syntax files from Sublime editor (files with <code>.sublime-syntax</code> extension).</p> <pre><code>from nelsie import Resources, SlideDeck\n\nresources = Resources(default_code_syntaxes=False)\nresources.load_code_syntax_dir(\"path/to/syntaxes\")\n\ndeck = SlideDeck(resources=resources)\n</code></pre> <p>Known bug</p> <p>If you want to add custom syntax definitions, you have to disable loading default syntaxes (<code>default_code_syntaxes=False</code>) otherwise <code>.load_code_syntax_dir()</code> will not work.</p>"},{"location":"guide/resources/#loading-custom-code-color-themes","title":"Loading custom code color themes","text":"<p>Nelsie supports loading color theme <code>thTheme</code> (files with <code>.thTheme</code> extension).</p> <pre><code>from nelsie import Resources, SlideDeck\n\nresources = Resources()\nresources.load_code_theme_dir(\"path/to/themes\")\n\ndeck = SlideDeck(resources=resources)\n</code></pre>"},{"location":"guide/resources/#reusing-resources-in-more-slide-decks","title":"Reusing resources in more slide decks","text":"<pre><code>from nelsie import Resources, SlideDeck\n\nresources = Resources()\n\ndeck1 = SlideDeck(resources=resources)\ndeck2 = SlideDeck(resources=resources)\n</code></pre>"},{"location":"guide/resources/#disable-loading-defaults","title":"Disable loading defaults","text":"<pre><code>from nelsie import Resources\n\nresources = Resources(system_fonts=False,\n                      default_code_syntaxes=False,\n                      default_code_themes=False)\n</code></pre>"},{"location":"guide/resources/#list-of-syntaxes","title":"List of syntaxes","text":"<pre><code>from nelsie import Resources\n\nresources = Resources()\nprint(resources.syntaxes())\n</code></pre>"},{"location":"guide/resources/#list-of-themes-for-syntax-highlighting","title":"List of themes for syntax highlighting","text":"<pre><code>from nelsie import Resources\n\nresources = Resources()\nprint(resources.themes())\n</code></pre>"},{"location":"guide/steps/","title":"Steps","text":"<p>Presentations often contain slides that are revealed gradually in several steps.Nelsie allows you to easily create multiple steps per slide and selectively show or configure individual elements in each step.</p> <p>Each slide can contain one or more steps, and each step will produce one page in the resulting presentation. What is shown in each step is configured by the <code>show</code> and <code>active</code> parameters of the box and the <code>InSteps</code> instance.</p> <pre><code>@deck.slide()\ndef show_demo(slide):\n\n    slide.set_style(\"default\", TextStyle(size=80))  # Just change size of font\n\n    # This slide generates 3 output pages\n\n    slide.box().text(\"One\")             # Show always\n    slide.box(show=\"2+\").text(\"Two\")    # Show from step 2\n    slide.box(show=\"3+\").text(\"Three\")  # Show from step 3\n</code></pre> Prev 1/3         Next <p>In the following examples we first introduce steps as natural numbers, but later we will show they may have hierarchical structure, similars to a sections and subsections to a book. For example 1.1, 1.2, etc.</p> <p>By default, slide is unfolded to all steps that occur in <code>show</code>, <code>active</code>, or <code>InSteps</code> and step <code>1</code>.  Step <code>1</code> is added automatically even it is not named anywhere. You can disable this behavior by setting parameter <code>step_1=False</code> when creating a new slide. What steps are rendered can be modified various means. Step <code>0</code> is special; It is a valid step but it is never shown even it is named.</p>"},{"location":"guide/steps/#box-show-parameter","title":"Box <code>show</code> parameter","text":"<p>Parameter <code>show</code> in <code>.box()</code> defines the steps in which the box (its contents and children) is displayed. It only affects the drawing itself, but not the layout. The layout is always calculated, i.e. the space is reserved for the box and its children, even in the steps where it is not painted.</p>"},{"location":"guide/steps/#example-1-showing-new-content-and-hinding-old-content","title":"Example 1 (showing new content and hinding old content)","text":"<pre><code>@deck.slide()\ndef show_demo(slide):\n\n    slide.set_style(\"default\", TextStyle(size=80))  # Just change size of font\n\n    # This slide generates 3 output pages\n\n    slide.box(show=1).text(\"One\")    # Show only in step 1\n    slide.box(show=2).text(\"Two\")    # Show only in step 2\n    slide.box(show=3).text(\"Three\")  # Show only in step 3\n</code></pre> Prev 1/3         Next"},{"location":"guide/steps/#example-2-rendering-only-named-steps","title":"Example 2 (rendering only named steps)","text":"<p>The following code creates the same resulting pages are the previous case, despite it uses different steps. The reason is that Nelsie only renders steps that are named.</p> <p>Debug steps</p> <p>We are also enabling <code>debug_steps</code> in this example. It attaches a black block under the slide with the current step.</p> <pre><code>@deck.slide(debug_steps=True)\ndef show_demo(slide):\n\n    slide.set_style(\"default\", TextStyle(size=80))  # Just change size of font\n\n    # This slide generates 3 output pages\n\n    slide.box(show=1).text(\"One\")     # Show only in step 1\n    slide.box(show=20).text(\"Two\")    # Show only in step 20\n    slide.box(show=30).text(\"Three\")  # Show only in step 30\n</code></pre> Prev 1/3         Next"},{"location":"guide/steps/#example-3-string-definitions","title":"Example 3 (string definitions)","text":"<p>The <code>show</code> argument may also define more complex step definitions as strings. Note, that range <code>X-Y</code> covers all steps in the range, however it forces to create only steps <code>X</code> and <code>Y</code>. The following example creates 4 pages, that are steps: 1,2,4,10</p> <pre><code>@deck.slide(debug_steps=True)\ndef show_demo(slide):\n\n    slide.set_style(\"default\", TextStyle(size=80))  # Just change size of font\n\n    slide.box(show=\"2+\").text(\"One\")     # Show from step two\n    slide.box(show=\"2-10\").text(\"Two\")   # Show in steps between 2-10, both ends included\n    slide.box(show=\"1,4\").text(\"Three\")  # Show in steps 1 and 4\n</code></pre> Prev 1/4         Next"},{"location":"guide/steps/#values-for-show","title":"Values for <code>show</code>","text":"<p>Parameter <code>show</code> takes the following types:</p> <ul> <li><code>bool</code> - the box is always shown (<code>True</code>) or hidden (<code>False</code>).</li> <li><code>int</code> - the box is shown only in the given step</li> <li><code>str</code> - a string may have the following format:<ul> <li><code>\"&lt;step&gt;\"</code> - the box is shown only in the given step</li> <li><code>\"&lt;step&gt;+\"</code> - the box is shown in the given step and all following steps</li> <li><code>\"&lt;step&gt;-&lt;step&gt;\"</code> - the box is shown in the steps in the given range.</li> <li>Comma separated list of the expression above. Then the box is shown in the union of steps defined by expressions. Example: <code>\"1, 5, 20-30, 35+\"</code>.</li> </ul> </li> </ul>"},{"location":"guide/steps/#silent-steps","title":"Silent steps","text":"<p>A step may be silenced by syntax <code>X?</code>:</p> <pre><code>@deck.slide(debug_steps=True)\ndef show_demo(slide):\n\n    slide.set_style(\"default\", TextStyle(size=80))  # Just change size of font\n\n    # This slide generates 2 output pages (step 1 and 3)\n\n    slide.box(show=\"1-3\").text(\"One\")     # Show from step two to three\n    slide.box(show=\"2?+\").text(\"Two\")     # Show in steps 2 and more, but does not force\n                                          # an existence of step 2\n</code></pre> Prev 1/2         Next"},{"location":"guide/steps/#box-active-parameter","title":"Box <code>active</code> parameter","text":"<p>Box <code>active</code> parameter is similar to <code>show</code>. It takes parameters as <code>show</code>, but in steps when the box is not active, it is also removed from the layout, i.e. no space is reserved for the box.</p> <pre><code>@deck.slide()\ndef show_demo(slide):\n\n    slide.set_style(\"default\", TextStyle(size=80))  # Just change size of font\n\n    # This slide generates 3 output pages\n\n    slide.box(active=1).text(\"One\")\n    slide.box(active=2).text(\"Two\")\n    slide.box(active=3).text(\"Three\")\n</code></pre> Prev 1/3         Next"},{"location":"guide/steps/#insteps-class","title":"<code>InSteps</code> class","text":"<p><code>InSteps</code> defines different values for step of slides. You can pass <code>InSteps</code> instance to almost all parameters of <code>.box()</code>. To find parameters where <code>InSteps</code> can be used, see API documentation. If type definition contains <code>InSteps</code> then it can be used for this parameter.</p>"},{"location":"guide/steps/#simple-example","title":"Simple example","text":"<pre><code>from nelsie import InSteps\n\n@deck.slide()\ndef inslides_demo(slide):\n\n    # Define different colors in steps: 1, 2, and 3\n    bg_colors = InSteps({1: \"red\", 2: \"green\", 3: \"blue\"})\n\n    slide.box(width=300, height=300, bg_color=bg_colors)\n</code></pre> Prev 1/3         Next"},{"location":"guide/steps/#semaphore-example","title":"Semaphore example","text":"<p>More instances of <code>InSteps</code> can be used at once:</p> <pre><code>@deck.slide()\ndef semaphore(slide):\n    slide.text(\"Semaphore example\", m_bottom=40)\n\n    semaphore = slide.box(width=200, height=600, bg_color=\"gray\")\n    semaphore.box(\n        # Configure \"y\" coordinate in each step\n        y=InSteps({1: 20, 2: 220, 3: 420}),\n\n        width=160,\n        height=160,\n\n        # Configure \"bg_color\" in each step\n        bg_color=InSteps({1: \"red\", 2: \"orange\", 3: \"green\"}),\n    )\n</code></pre> Prev 1/3         Next"},{"location":"guide/steps/#undefined-step-values","title":"Undefined step values","text":"<p>When <code>InSteps</code> is used, you do not need to define all step values. If no value is defined for a given step, then a value for the next smaller step is used. If no such step is defined, then the default for the parameter is used.</p> <pre><code>from nelsie import InSteps\n\n@deck.slide()\ndef inslides_demo(slide):\n\n    slide.set_style(\"default\", TextStyle(size=60))\n\n    # Define different colors in steps: 2 and 4\n    bg_colors = InSteps({2: \"red\", 4: \"green\"})\n\n    box = slide.box(width=300, height=300, bg_color=bg_colors)\n    for i in range(1, 6):\n        box.text(f\"Step {i}\", active=i)\n</code></pre> Prev 1/5         Next"},{"location":"guide/steps/#insteps-initialized-by-a-list","title":"<code>InSteps</code> initialized by a list","text":"<p>Instead of directory, <code>InSteps</code> can be also initialized by a list of values. It then defines values for first n steps where n is a length of the list.</p> <pre><code>InSteps([\"red\", \"green\", \"blue\"])\n\n# Is equivalent to:\n\nInSteps({1: \"red\", 2: \"green\", 3: \"blue\"})\n</code></pre>"},{"location":"guide/steps/#configuring-steps","title":"Configuring steps","text":"<p>The visible steps is automatically determined from the values in <code>show</code>, <code>active</code>, or the use of <code>InSteps</code>.  You can override this by calling <code>insert_step</code> and <code>remove_step</code> on a slide:</p> <pre><code>from nelsie import InSteps\n\n@deck.slide()\ndef inslides_demo(slide):\n\n    # Define different colors in steps: 1, 2, and 3\n    bg_colors = InSteps({1: \"red\", 2: \"green\", 3: \"blue\"})\n\n    slide.box(width=300, height=300, bg_color=bg_colors)\n\n    # This slide will have only 3 steps, \n    slide.remove_step(2)\n    slide.insert_step(4)\n</code></pre> Prev 1/3         Next <p>The <code>.remove_step</code> method should be called after all step values have been configured, because any subsequent call of step configuration may again increase the final number of steps.  There is also <code>.remove_steps_below</code> and <code>.remove_steps_above</code> to remove all steps below (resp. above) a given step.</p> <p>You get the information of visible steps for a slide by calling <code>get_steps</code>. The method returns sorted steps:</p> <pre><code>slide.get_steps()\n</code></pre>"},{"location":"guide/steps/#hierarchical-steps","title":"Hierarchical steps","text":"<p>Steps does not have to be only natural numbers, but they may have hierarchal structure, like in a sections and subsections of a book (example: 1.1, 1.2, 5.1.1). Formally a step is a non-empty sequence of natural numbers. Step are lexicographically ordered.</p> <p>Hierarchical steps are defined as a tuple of <code>int</code>s if defined as Python object. Step defined as a just <code>int</code> is equivalent to a tuple with a single element.  If a step is defined in a string form then <code>.</code> is used as a delimiter. Example: <code>(2, 3)</code> is equivalent to <code>\"2.3\"</code>.</p> <pre><code>@deck.slide(debug_steps=True)\ndef step_demo1(slide):\n\n    slide.set_style(\"default\", TextStyle(size=80))  # Just change size of font\n\n    # This slide generates 3 output pages\n\n    slide.box(show=1).text(\"One\")\n    slide.box(show=(1, 1)).text(\"Two\")\n    slide.box(show=(1, 2)).text(\"Three\")\n    slide.box(show=2).text(\"Four\")\n</code></pre> Prev 1/4         Next <p>Note that if you define that something should be shown (or active) in a step then it is shown (or active) in all of its substeps. If you want to exclude substeps you have to use <code>!</code> character before the step definition:</p> <pre><code>@deck.slide(debug_steps=True)\ndef step_demo2(slide):\n\n    slide.set_style(\"default\", TextStyle(size=80))  # Just change size of font\n\n    # This slide generates 3 output pages\n\n    slide.box(show=\"!1\").text(\"One\")\n    slide.box(show=(1, 1)).text(\"Two\")\n    slide.box(show=(1, 2)).text(\"Three\")\n    slide.box(show=2).text(\"Four\")\n</code></pre> Prev 1/4         Next"},{"location":"guide/steps/#last-last-next-next-keywords","title":"<code>last</code>, <code>last+</code>, <code>next</code>, <code>next+</code> keywords","text":"<p>Box <code>show</code> and <code>active</code> takes also the following keywords. By \"next major step\" we mean the smallest step of the length one that is higher than current visible steps (e.g. next major step for steps <code>1, 2, 5</code> is it <code>6</code> and for <code>2.2, 2.3.1</code> is it <code>3</code>)</p> <ul> <li>\"last\" is equivalent to the current highest visible step</li> <li>\"last+\" is equivalent to the current highest visible steps and all steps above</li> <li>\"next\" is equivalent to the next major step</li> <li>\"next+\" is equvalent to the next major step and all steps above </li> </ul> <pre><code>@deck.slide()\ndef keywords_demo(slide):\n    slide.text(\"Line 1\")\n    slide.text(\"Line 2\", show=\"next+\")\n    slide.text(\"Line 3\", show=\"next+\")\n    slide.text(\"Line 4\", show=\"last\")\n</code></pre> Prev 1/3         Next"},{"location":"guide/steps/#step-replacing","title":"Step replacing","text":"<p>Step replacing is change the \"current step\" value for a subtree of box hierarchy. It is usefull when you already have a code (or an image with steps) and you want show just a selection of steps or reorder steps without change of the source.</p> <pre><code>@deck.slide()\ndef show_demo(slide):\n\n    slide.set_style(\"default\", TextStyle(size=80))  # Just change size of font\n\n    # For \"main\" box and its children, 1st step will be overriden to 3rd step\n    main = slide.box(replace_steps={1: 3})\n\n    main.box(show=1).text(\"One\")    # Show only in step 1\n    main.box(show=2).text(\"Two\")    # Show only in step 2\n    main.box(show=3).text(\"Three\")  # Show only in step 3\n</code></pre> Prev 1/3         Next"},{"location":"guide/text/","title":"Text","text":"<p>This section is about drawing text on slides.</p> <p>Text is drawn on a box (or slide) by calling the <code>.text()</code> method. It creates a new box containing a text.</p> <pre><code>@deck.slide()\ndef text_demo(slide):\n    slide.text(\"Hello world!\")\n</code></pre> <p>Note for Elsie users</p> <p>Calling <code>.text()</code> creates a new box; this is a different behavior than in Elsie, where calling <code>.text()</code> does not create a new box, which very often leads to code like <code>.box().text()</code> to create a wrapping box. This is not necessary in Nelsie.</p>"},{"location":"guide/text/#text-styles","title":"Text styles","text":"<p>The drawing of a text is configured by <code>TextStyle</code> instances. One of the uses is to set it as the second argument of the <code>.text()</code> method.</p> <pre><code>from nelsie import TextStyle\n\n@deck.slide()\ndef text_style_demo(slide):\n    style = TextStyle(size=100, color=\"green\")\n    slide.text(\"Hello world!\", style)\n</code></pre> <p>The <code>TextStyle</code> constructor has the following parameters; each parameter can be `None', which means that the parameter will not be overridden by this style.</p> <ul> <li><code>font_family</code>: <code>str</code> - Name of the font</li> <li><code>color</code>: <code>str</code> - Color of the text</li> <li><code>size</code>: <code>float</code> - Size of the font</li> <li><code>line_spacing</code>: <code>float</code> - Line spacing relative to <code>size</code></li> <li><code>italics</code>: <code>bool</code> - Enable italic mode</li> <li><code>weight</code>: <code>int</code> - Weight of the font; values 1-1000<ul> <li>400 = Normal</li> <li>700 = Bold</li> </ul> </li> <li><code>bold</code>: <code>bool</code> - Shortcut that sets <code>weight=700</code></li> <li><code>underline</code>: <code>bool</code> - Draws a line under the text</li> <li><code>overline</code>: <code>bool</code> - Draws a line over the text</li> <li><code>line_through</code>: <code>bool</code> - Draws a line through a text</li> <li><code>stroke</code>: <code>Stroke | None</code> - If not <code>None</code>, font is drawn in stroked mode (see Paths for documentation of <code>Stroke</code> class)</li> <li><code>stretch</code>: <code>FontStretch</code>:<ul> <li><code>FontStretch.UltraCondensed</code></li> <li><code>FontStretch.ExtraCondensed</code></li> <li><code>FontStretch.Condensed</code></li> <li><code>FontStretch.SemiCondensed</code></li> <li><code>FontStretch.Normal</code></li> <li><code>FontStretch.SemiExpanded</code></li> <li><code>FontStretch.Expanded</code></li> <li><code>FontStretch.ExtraExpanded</code></li> <li><code>FontStretch.UltraExpanded</code></li> </ul> </li> </ul>"},{"location":"guide/text/#named-styles","title":"Named styles","text":"<p>Each box can have a set of named fonts defined. When a new box is created it inherits all named styles from its parent.</p> <pre><code>@deck.slide()\ndef text_style_demo(slide):\n    slide.set_style(\"my-style\", TextStyle(size=100, color=\"red\"))\n    slide.text(\"Hello world!\", \"my-style\")\n</code></pre> <p>Slide deck may also defines a font that is inherited by all slides.</p> <pre><code>deck.set_slide(\"my-style\", TextStyle(size=100, color=\"red\"))\n</code></pre>"},{"location":"guide/text/#build-in-styles","title":"Build-in styles","text":"<p>There are three predefined text styles:</p> <ul> <li><code>\"default\"</code></li> <li><code>\"monospace\"</code></li> <li><code>\"code\"</code></li> </ul> <p>Style <code>\"default\"</code> is special and is used as a source of default values for drawing fonts when values are not overridden by more specific fonts:</p> <pre><code>@deck.slide()\ndef default_style_demo(slide):\n\n    # Set default style\n    slide.set_style(\"default\", TextStyle(color=\"blue\"))\n\n    # Draw text with overriden style, color is taken from the default style\n    slide.text(\"Hello world!\", TextStyle(size=100))\n</code></pre> <p>Style <code>\"monospace\"</code> sets the font family to a monospace font.</p> <p>Style <code>\"code\"</code> is used as a default style in <code>.code()</code> method. See Code for more details. By default is have the same effect as style <code>\"monospace\"</code>.</p>"},{"location":"guide/text/#inline-styles","title":"Inline styles","text":"<p>Named styles are particularly useful for modifying individual blocks of text within a single string passed to the <code>.text()</code> method. To style a block of text, use the following syntax <code>~STYLE{TEXT}</code> where STYLE is a style name and TEXT is the styled text.</p> <pre><code>@deck.slide()\ndef inline_style_demo(slide):\n\n    slide.set_style(\"red\", TextStyle(color=\"red\"))\n    slide.set_style(\"big\", TextStyle(size=64))\n\n    slide.text(\"~red{Hello} world!\\n~monospace{github.com/spirali/~big{nelsie}}\")\n</code></pre>"},{"location":"guide/text/#fonts","title":"Fonts","text":"<p>A font can be specified by the <code>font_family</code> parameter of <code>TextStyle</code>. All system fonts are available by default. You can add more fonts via Resources.</p> <p>Nelsie is not shipped with a built-in font and tries to automatically detect a sans-serif font as <code>font_family</code> for the <code>\"default\"</code> style and a monospace font for the <code>\"monospace\"</code> style.</p> <p>You can override this behavior by setting</p> <pre><code>deck = SlideDeck(default_font=\"Helvetica\", default_monospace_font=\"Ubuntu Mono\")\n</code></pre> <p>Robust slide rendering across systems</p> <p>For robust cross-platform slide rendering, it is recommended to include all used fonts along with the slide source code.</p>"},{"location":"guide/text/#text-alignment","title":"Text alignment","text":"<p>A text can be aligned to the left, center, and right by setting <code>.text(align=\"...\")</code> to <code>\"start\"</code>, <code>\"center\"</code>, or <code>\"end\"</code>. The value <code>\"start\"</code> is the default.</p> <pre><code>@deck.slide()\ndef text_align_demo(slide):\n\n    TEXT = \"Line 1\\nLooooong line\\nThird line\"\n\n    box = slide.box(gap=(0, 50))\n    box.text(TEXT, align=\"start\")\n    box.text(TEXT, align=\"center\")\n    box.text(TEXT, align=\"end\")\n</code></pre>"},{"location":"guide/text/#text-box","title":"Text box","text":"<p>Calling <code>.text()</code> creates a box for the text; the method takes the same arguments as <code>.box()</code> to configure the underlying box.</p> <pre><code>@deck.slide()\ndef text_box_demo(slide):\n    box = slide.box(bg_color=\"gray\")\n    box.text(\"Hello world!\", bg_color=\"orange\", m_x=50, m_y=30)\n</code></pre>"},{"location":"guide/text/#updating-style","title":"Updating style","text":"<p>The <code>.set_style()</code> method overrides the whole style over given name:</p> <pre><code>deck.set_style(\"my-style\", TextStyle(color=\"green\"))\n\n@deck.slide()\ndef text_style_demo(slide):\n    slide.set_style(\"default\", TextStyle(size=80))\n\n    # \"my-style\" now forgets the color, as we fully redefining what \"my-style\" is\n    slide.set_style(\"my-style\", TextStyle(italic=True))\n    slide.text(\"Hello world!\", \"my-style\")\n</code></pre> <p>There is method <code>.update_style()</code>, if we want to \"update\" style, and change only some properties and keep others.</p> <pre><code>deck.set_style(\"my-style\", TextStyle(color=\"green\"))\n\n@deck.slide()\ndef text_style_demo(slide):\n    slide.set_style(\"default\", TextStyle(size=80))\n\n    # \"my-style\" now contains both color change to green and italic style\n    slide.update_style(\"my-style\", TextStyle(italic=True))\n    slide.text(\"Hello world!\", \"my-style\")\n</code></pre> <p>Setting a default style</p> <p>There is an exception for style <code>\"default\"</code> as it always needs to define all attributes. Hence <code>.set_style()</code> for <code>\"default\"</code> style always behaves as <code>.update_style()</code>.</p>"},{"location":"guide/text/#text-and-insteps","title":"Text and <code>InSteps</code>","text":"<p>You may use <code>InSteps</code> in <code>.text()</code>:</p> <pre><code>@deck.slide()\ndef text_style_demo(slide):\n    slide.set_style(\"default\", TextStyle(size=80))\n    slide.text(InSteps({1: \"Hello world!\", 2: \"Hello Nelsie!\"}))\n</code></pre> Prev 1/2         Next <p>You can also provide an array of strings and <code>InSteps</code>. String in the array is concatenated for each step:</p> <pre><code>@deck.slide()\ndef text_style_demo(slide):\n    slide.set_style(\"default\", TextStyle(size=80))\n    slide.text([\"Hello \", InSteps({1: \"world\", 2: \"Nelsie\"}), \"!\"])\n</code></pre> Prev 1/2         Next"},{"location":"guide/text/#text-styles-and-insteps","title":"Text styles and <code>InSteps</code>","text":"<p>When a style is set through <code>set_style</code> an instance of <code>InSteps</code> can be used:</p> <pre><code>@deck.slide()\ndef text_style_demo(slide):\n    slide.set_style(\"default\", TextStyle(size=80))\n    slide.set_style(\"my-style\",\n                    InSteps({1: TextStyle(color=\"red\"), 2: TextStyle(color=\"green\")}))\n    slide.text(\"Hello world!\", \"my-style\")\n</code></pre> Prev 1/2         Next"},{"location":"guide/text/#automatic-text-stripping","title":"Automatic text stripping","text":"<p>The <code>.text()</code> method automatically strips whitespace from the beginning and end of the text. This can be disabled by setting <code>.text(..., strip=False)</code>.</p>"},{"location":"guide/watch/","title":"Slides rebuilding","text":"<p>Nelsie can automatically rebuild slides when the source Python file is changed or when images used in slides are changed. It is started by the following command (lets assume that our slides are defined in <code>slides.py</code>).</p> <pre><code>$ python3 -m nelsie watch slides.py\n</code></pre> <p>Nelsie builds the slides and starts to watch <code>slides.py</code> and used images and rebuilds the slides when relevant files are changed. Note that if the first build fails, the watch is not started.</p> <p>You can also watch multiple files. In that case, the first watched Python script will get re-executed when any of these watched filepaths change.</p>"}]}